apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'
//apply plugin: 'kotlin-kapt'


def ksPropFile = rootProject.file("keystore.properties")
def ksProp = new Properties()
ksProp.load(new FileInputStream(ksPropFile))

android {

    compileSdkVersion rootProject.ext.compileSdkVersion
//    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        // 应用 id
        applicationId rootProject.ext.applicationId
        // 最小 sdk 版本，低于此 Android 版本的手机不能安装
        minSdkVersion rootProject.ext.minSdkVersion
        // 目标 sdk 版本，低于此 Android 版本的手机完美兼容，高于此 Android 版本的手机，部分特性不能使用
        // 升级 target 需要针对高版本做兼容。
        targetSdkVersion rootProject.ext.targetSdkVersion
        // 应用版本号，覆盖安装时，升级版本依据
        versionCode rootProject.ext.app.versionCode
        // 版本名称，
        versionName rootProject.ext.app.versionName
        // 库 module 没有开发进度的维度，因此忽略
//        missingDimensionStrategy 'dev', 'pro'
//        missingDimensionStrategy 'minApi21', 'minApi23','minApi26'

//        javaCompileOptions {
//            annotationProcessorOptions {
//                argument "key1", "value1"
//                argument "key2", "value2"
//            }
//        }
        // 指定需要编译 abi 版本的 so
//        ndk{
//            abiFilters 'armeabi-v7a'
//        }
//        //  设置编译的资源
//        resConfigs "zh-rCN"
//        // Manifest 中配置常量
//        manifestPlaceholders = [hostName: "www.baidu.com"]
        // 多 dex 支持 ，minSdkVersion >= 20 使用
        multiDexEnabled true
    }

    signingConfigs {
        // 生产签名
        release {
            keyAlias ksProp['keyAlias']
            keyPassword ksProp['keyPassword']
            storeFile file(ksProp['storeFile'])
            storePassword ksProp['storePassword']
        }
    }


    buildTypes {
        // 测试版本
        debug {
            // 允许 Java 代码调试（默认允许）
            debuggable true
            // 允许 JNI 代码调试（默认允许）
            jniDebuggable true
//            // 版本名称后缀
//            versionNameSuffix = '-beta'
//            // 应用 Id 后缀
//            applicationIdSuffix '.debug'
        }
        // 发行版本
        release {
            // 禁止 Java 代码调试（默认禁止）
            debuggable false
            // 禁止 JNI 代码调试 （默认禁止）
            jniDebuggable false
            signingConfig signingConfigs.release
            // build/intermediates/proguard-files 目录下存在三个混淆配置文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
            // 允许代码压缩、混淆、优化,默认情况下会使用 R8 压缩
            minifyEnabled true
            // 允许资源压缩，包括清理无用资源
            shrinkResources true
            // 配置需要放在主 dex 中的类
//            multiDexKeepFile file('multidex-config.txt')
            // 或者使用下面的配置，语法同 proguard file
//            multiDexKeepProguard file('multidex-config.pro')
        }
//        // 内部使用版本
//        inner {
//            // 使用 debug 的配置
//            initWith debug
//            applicationIdSuffix '.inner'
//            // 可匹配库 module 的构建类型列表，
//            // inner 匹配失败 ， debug 匹配成功， release 忽略
//            matchingFallbacks = ['inner', 'debug', 'release']
//        }
    }

//    flavorDimensions 'stage', 'api'
//
//    productFlavors {
//        // 开发阶段
//        dev {
//            dimension 'stage'
//        }
//        // 生产阶段
//        pro {
//            dimension 'stage'
//        }
//
//        minApi21 {
//            dimension 'api'
//            minSdkVersion 21
//            // 库 module 没有 minApi21 ，匹配较高版本
//            // 同时需要在 AndroidManifest.xml 中使用 overrideLibrary
//            matchingFallbacks = ['minApi23']
//        }
//        minApi23 {
//            dimension 'api'
//            minSdkVersion 23
//        }
//        minApi26 {
//            dimension 'api'
//            minSdkVersion 26
//            // 库 module 没有 minApi26 ，匹配较低版本，可兼容
//            matchingFallbacks = ['minApi23']
//        }
//    }
//
//    //  设置不需要生成 apk 的类型和特性
//    variantFilter { variant ->
//        // 将多个 flavor 组合转成  字符串数组
//        def names = variant.flavors*.name
//        // 获取到 buildType 名称
//        def type = variant.buildType.name
//        // 忽略部分不需要生成的 apk
//        if (names.contains('pro') && type.equals("inner")) {
//            setIgnore(true)
//        }
//
//    }


//    splits {
////       注意和 nkd.abiFilters 的冲突
//        abi {
//            enable true
//            // 包含所有版本so 的apk 文件。此配置仅用于 abi 。
//            // density 中默认会生成包含所有资源的 apk
//            universalApk true
//            // 去除  x86 和 x86_64
//            exclude 'x86', 'x86_64'
//        }
////       注意和 resConfigs 的冲突
//        density {
//            enable true
//            reset()
//            include "xhdpi"
////            compatibleScreens 'small', 'normal', 'large', 'xlarge'
//        }
//    }

}

//import com.android.build.OutputFile


//    int MILLIS_IN_MINUTE = 1000 * 60
//    int minutesSinceEpoch = System.currentTimeMillis() / MILLIS_IN_MINUTE

// 定义两个 abi 版本
//ext.abiCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2]

android.applicationVariants.all { variant -> // 此变量可不写


    outputs.each { output ->
        // 根据不同的 abi 修改版本号
//        def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
//        if (baseAbiVersionCode != null)
//            output.versionCodeOverride = baseAbiVersionCode * 1000 + variant.versionCode
//            println variant.flavorName
        // 修改版本号
//            output.versionCodeOverride = 12
        // 修改版本名称
//            output.versionNameOverride = "26181309-proMinApi21"

//        print output.outputFileName + " --> "
//        println output.versionCode

    }

//        println buildType.name + "  " + flavorName + " " + versionName + " " + versionCode


    packageApplicationProvider.configure {
//        outputDirectory = new File("${projectDir}", "output/" + flavorName + "/" + buildType.name)
    }


    outputs.all { output ->
            outputFileName = new File("11.apk")


//        println outputFileName
//            println outputFile
    }


//        if (variant.buildType.name == "debug") {
//
//            variant.mergedFlavor.versionCode = minutesSinceEpoch;
//            variant.mergedFlavor.versionName = minutesSinceEpoch + "-" + variant.flavorName;
//        }
}

//configurations {
//    // 添加多个依赖项配置
//    devMinApi21DebugImplementation {}
//    devMinApi21Api {}
//    devDebugCompileOnly {}
//    minApi21DebugRuntimeOnly {}
//}


dependencies {
    // 依赖同级的 libs 目录，只包含jar
//    implementation fileTree(include: '*.jar', dir: 'libs')
    // 依赖同级的 libs 目录，包含 jar 和 aar，还可以选择不包含指定文件
    implementation fileTree(dir: 'libs', include: ['*.aar', '*.jar'], exclude: [])
    implementation 'androidx.annotation:annotation:1.2.0'
//    // debug  类型的依赖
//    debugImplementation fileTree(include: '*.jar', dir: 'src/debug/libs')
//    // release  类型的依赖
//    releaseImplementation fileTree(include: '*.jar', dir: 'src/release/libs')
//    // 同理 devImplementation minApi21Implementation innerImplementation
//    // 如果 需要组合使用，如 devMinApi21DebugImplementation，见 configurations
//
//    // 依赖本地 module
    implementation project(':lib')
    implementation project(':jni')
//    implementation project(':other-lib')
//    // 等同于带 path 参数
////    implementation project(path: ':library')
//    // 依赖远程库，不建议在版本号中使用 + 通配符,括号可以省略
//    implementation 'com.android.support:appcompat-v7:28.0.0'
//    implementation('com.android.support:support-v4:28.0.0') {
//        // 一个远程库可能包含多个第三方库，可以排除指定库
//        exclude group: 'com.android.support', module: 'collections'
//    }
//    // 等同于复杂形势
////    implementation group: 'com.android.support', name: 'support-v4', version: '28.0.0'
//    implementation 'com.google.dagger:dagger:2.24'
//    annotationProcessor 'com.google.dagger:dagger-compiler:2.24'
//    // 5.0  之前多 dex 支持，minSdkVersion < 20 必须使用。
//    implementation 'androidx.multidex:multidex:2.0.1'
}